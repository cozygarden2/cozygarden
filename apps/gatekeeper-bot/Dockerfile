# This file is generated by Nx.
#
# Build the docker image with `npx nx docker-build gatekeeper-bot`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with `docker run -p 3000:3000 -t gatekeeper-bot`.
FROM docker.io/node:lts-alpine

ENV HOST=0.0.0.0
ENV PORT=3000

WORKDIR /app

RUN addgroup --system gatekeeper-bot && \
          adduser --system -G gatekeeper-bot gatekeeper-bot

COPY dist/apps/gatekeeper-bot gatekeeper-bot/
RUN chown -R gatekeeper-bot:gatekeeper-bot .

# You can remove this install step if you build with `--bundle` option.
# The bundled output will include external dependencies.
# RUN npm --prefix gatekeeper-bot --omit=dev -f install

CMD [ "node", "gatekeeper-bot" ]

# # Install dependencies only when needed
# FROM docker.io/node:lts-alpine AS deps
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# RUN apk add --no-cache libc6-compat
# WORKDIR /usr/src/app
# COPY dist/apps/gatekeeper-bot/package*.json ./
# RUN npm install --omit=dev

# # Production image, copy all the files and run nest
# FROM docker.io/node:lts-alpine AS runner
# RUN apk add --no-cache dumb-init
# ENV NODE_ENV=production
# ENV PORT=3000
# WORKDIR /usr/src/app
# COPY --from=deps /usr/src/app/node_modules ./node_modules
# COPY --from=deps /usr/src/app/package.json ./package.json
# COPY dist/apps/gatekeeper-bot .
# RUN chown -R node:node .
# USER node
# EXPOSE 3000
# CMD ["dumb-init", "node", "main.js"]
